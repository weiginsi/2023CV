# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'pose.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import os
import sys
import cv2
from PyQt5.QtGui import *
from subprocess import Popen, PIPE
from PyQt5 import QtCore, QtWidgets
from PyQt5.QtCore import QThread
from PyQt5.QtGui import QPixmap
from PyQt5.QtWidgets import QFileDialog, QMainWindow, QDesktopWidget, QApplication
import run_video

global pose_img
pose_img = 0


def cvimg_to_qtimg(cvimg):
    height, width, depth = cvimg.shape
    cvimg = cv2.cvtColor(cvimg, cv2.COLOR_BGR2RGB)
    cvimg = QImage(cvimg.data, width, height, width * depth, QImage.Format_RGB888)

    return cvimg


class RunCodeThread(QThread):
    def __init__(self, video_path):
        super(RunCodeThread, self).__init__()
        self.video_path = video_path

    def run(self):
        command = ['python', 'run_video.py', '--video', self.video_path]
        p = Popen(command, stdout=PIPE, stderr=PIPE)
        out, err = p.communicate()


# 定义一个类，这个类从QMainWindow里面继承
class CenterForm(QMainWindow):

    # 初始化
    def __init__(self, parent=None):
        super(CenterForm, self).__init__(parent)

        # 设置主窗口的标题
        self.setWindowTitle('pose')

        # 设置窗口的尺寸
        self.resize(400, 300)

        # 添加center方法，作用就是让窗口居中
        def center(self):
            # 创建实例，获得屏幕对象,得到屏幕的坐标系
            screen = QDesktopWidget().screenGeometry()

            # 得到窗口的坐标系
            size = self.geometry()

            # 获取屏幕的宽度、高度
            # 窗口左边缘的坐标等于(屏幕的宽度-窗口的宽度)/2
            newLeft = (screen.width() - size.width()) / 2

            # 屏幕上边缘的坐标等于(屏幕的高度-窗口的高度) / 2
            newTop = (screen.height() - size.height()) / 2

            # 移动窗口
            self.move(newLeft, newTop)


class MyWindow(QtWidgets.QWidget):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(751, 523)
        self.label = QtWidgets.QLabel(Form)
        self.label.setGeometry(QtCore.QRect(160, 110, 361, 341))
        self.label.setText("")
        self.label.setObjectName("label")
        self.widget = QtWidgets.QWidget(Form)
        self.widget.setGeometry(QtCore.QRect(130, 30, 421, 30))
        self.widget.setObjectName("widget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.widget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.pushButton = QtWidgets.QPushButton(self.widget)
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout.addWidget(self.pushButton)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        self.pushButton_2 = QtWidgets.QPushButton(self.widget)
        self.pushButton_2.setObjectName("pushButton_2")
        self.horizontalLayout.addWidget(self.pushButton_2)
        #######################
        self.pushButton.clicked.connect(self.select_video)
        self.pushButton_2.clicked.connect(self.run_code)
        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)
        #
        # pixmap = QPixmap('./res/1.jpg')
        #
        # # 在 QLabel 控件上显示 QPixmap 对象
        # self.label.setPixmap(pixmap)
        # # 显示 QLabel 控件
        # self.label.show()

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.pushButton.setText(_translate("Form", "选择文件"))
        self.pushButton_2.setText(_translate("Form", "开始"))

    def select_video(self):
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        self.video_path, _ = QFileDialog.getOpenFileName(self, "Select Video", "",
                                                         "MP4 Files (*.mp4);;All Files (*)", options=options)
        if self.video_path:
            self.label.setText(f"Selected Video: {os.path.basename(self.video_path)}")

    def run_code(self):
        if self.video_path:
            self.run_thread = RunCodeThread(self.video_path)
            self.run_thread.start()


if __name__ == '__main__':
    # 只有直接运行这个脚本，才会往下执行
    # 别的脚本文件执行，不会调用这个条件句

    # 实例化，传参
    app = QApplication(sys.argv)

    # 创建对象
    mainWindow = CenterForm()
    # 创建ui，引用pose文件中的Ui_MainWindow类
    ui = MyWindow()
    # 调用Ui_MainWindow类的setupUi，创建初始组件
    ui.setupUi(mainWindow)
    # 创建窗口
    mainWindow.show()


    # 进入程序的主循环，并通过exit函数确保主循环安全结束(该释放资源的一定要释放)
    sys.exit(app.exec_())
